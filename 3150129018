

#######二分法######
function binary_search(f,g,l0,r0,d)
    n=ceil(log(abs(r0-l0)/d)/log(2))
    if l0 < r0
        l = r0
        r= l0
    else
        if l0 > r0
            l=r0
            r=l0
        else
            println("RROR:l0==r0,θ-width range")
        end
    end
    m=(l+r)*0.5
    for i=1:n
        gm=g(m)
        println("l=$l,r=$r,m=$m,g=$gm")
        if abs(gm )< 10d-15
            return m,f(m)
        else
            if gm < 0
                l=m
            else
                r=m
            end
        end
        m=(l+r)*0.5
    end
    return m,f(m)
end
######黄金分割法#####
        function golden(f,a,b,ρ,d)
      n=ceil(log(d/abs(a-b))/log(0.61803))
    a0=a
    b0=b
    a1=a0+ρ*(b0-a0)
    b1=a0+(1-ρ)*(b0+a0)
    for i=1:n
        fm=f(a1)
        gm=f(b1)
        println("l=$a1,r=$b1,m=$fm,g=$gm")
        if fm<gm
            a0=a0
            b0=b1
            b1=a1
            a1=a0+ρ*(b0-a0)
        else
            a0=a1
            b0=b0
            a1=b1
            b1=a0+(1-ρ)*(b0-a0)         
        end
    endA
    return a0,b0
End
######斐波那契####
    function fibonacci(f,l0,r0,ξ=0.1,d=0.3)
    threshold=(1+2*ξ)/(d/abs(r0-l0)) 
    fib=[1,2]
    n=3
    current=fib[n-1]+fib[n-2]
    while current<threshold
        push!(fib,current)
        n+=1
        current=fib[n-1]+fib[n-2]
        end 
        a=push!(fib,current)
        fib 
        m=n 
        ρ=1-a[m-1]/a[m]        
        a0=l0
        b0=r0
        a1=a0+ρ*(b0-a0)
        b1=a0+(1-ρ)*(b0-a0)
    for i=1:n-1
        m-=1
        fm=f(a1)
        gm=f(b1)      
        if fm<gm
            a0=a0
            b0=b1
            b1=a1
            ρ=1-a[m-1]/a[m]          
          if i<3
            a1=a0+ρ*(b0-a0)
            else  
                 a1=a0+(ρ-0.05)*(b0-a0)
            end   
        else
            a0=a1
            b0=b0
            a1=b1
            if m>1
            ρ=1-a[m-1]/a[m]
       
            b1=a0+(1-ρ)*(b0-a0)   
            end          
        end    
    end
    return a0,b0
end
    



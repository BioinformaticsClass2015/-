{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "二分法"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Binary_Search (generic function with 2 methods)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function binary_search(f,g,l0,r0,e=0.01)\n",
    "    n = ceil(log(abs(l0-r0)/e)/log(2))\n",
    "    if l0<r0\n",
    "        l = l0\n",
    "        r = r0\n",
    "    else\n",
    "        if l0>r0\n",
    "            l = r0\n",
    "            r = l0\n",
    "        else\n",
    "            println(\"ERROR!\")\n",
    "        end\n",
    "    end\n",
    "    m = (l+r)*0.5\n",
    "    for i = 1:n\n",
    "        gm = g(m)\n",
    "        if abs(gm)==0\n",
    "            return m,f(m)\n",
    "        else\n",
    "            if gm < 0\n",
    "                l = m\n",
    "            else\n",
    "                r = m\n",
    "            end\n",
    "        end\n",
    "        m = (l+r)*0.5\n",
    "    end\n",
    "    return l,r,m,f(m)\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.75, 1.0, 0.875, -24.105224609375)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "binary_search(x->x^4-14*x^3+60*x^2-70*x,x->4*x^3-14*3*x^2+60*2*x-70,0,2,0.3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "黄金分割法"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "golden_search (generic function with 3 methods)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function golden_search(f,a0,b0,e=0.3,p=0.382)\n",
    "    n = ceil(log(e/abs(a0-b0))/log(1-p))\n",
    "    if a0<b0\n",
    "        a = a0\n",
    "        b = b0\n",
    "    else\n",
    "        if a0>b0\n",
    "            a = b0\n",
    "            b = a0\n",
    "        else\n",
    "            println(\"ERROR!\")\n",
    "        end\n",
    "    end\n",
    "     a1 = a+p*(b-a)\n",
    "     b1 = a+(1-p)*(b-a)\n",
    "    for i = 1:n\n",
    "        if f(a1)<f(b1)\n",
    "            a = a\n",
    "            b = b1\n",
    "        else\n",
    "            a = a1\n",
    "            b = b\n",
    "        end\n",
    "        a1 = a+p*(b-a)\n",
    "        b1 = a+(1-p)*(b-a)\n",
    "    end\n",
    "    return a,b\n",
    "end\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.652478180448, 0.944210064)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "golden_search(x->x^4-14*x^3+60*x^2-70*x,0,2,0.3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "斐波那契数列法"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "fibonacci (generic function with 3 methods)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "function fibonacci(f,a0,b0,e1,e2=0.05)\n",
    "    threshold=abs(a0-b0)*(1+2*e2)/e1\n",
    "    fib=[1,2]\n",
    "    n=3\n",
    "    current=fib[n-1]+fib[n-2]\n",
    "    while current<threshold\n",
    "        push!(fib,current)\n",
    "        n+=1\n",
    "        current=fib[n-1]+fib[n-2]\n",
    "    end\n",
    "    push!(fib,current)\n",
    "    N=n-1\n",
    "    fib=sort(fib,1,rev=true)\n",
    "   if a0<b0\n",
    "        a = a0\n",
    "        b = b0\n",
    "    else\n",
    "        if a0>b0\n",
    "            a = b0\n",
    "            b = a0\n",
    "        else\n",
    "            println(\"ERROR!\")\n",
    "        end\n",
    "    end\n",
    "    for i=1:N\n",
    "         if i==N\n",
    "            p=1-fib[i+1]/fib[i]-e2\n",
    "        else\n",
    "            p=1-fib[i+1]/fib[i]\n",
    "        end\n",
    "        l= a+p*(b-a)\n",
    "        r= a+(1-p)*(b-a)\n",
    "       fl=round(f(l),2)\n",
    "       fr=round(f(r),2)\n",
    "         if f(l)<f(r)\n",
    "            b=r\n",
    "        else\n",
    "           a = l\n",
    "        end\n",
    "    end\n",
    "    return a,b\n",
    "end\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.725, 1.0)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fibonacci(x->x^4-14*x^3+60*x^2-70*x,0,2,0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Julia 0.6.2",
   "language": "julia",
   "name": "julia-0.6"
  },
  "language_info": {
   "file_extension": ".jl",
   "mimetype": "application/julia",
   "name": "julia",
   "version": "0.6.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
